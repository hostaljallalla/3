{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Proyecto Hostal\\\\frontend\\\\src\\\\ReservationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ReservationContext = /*#__PURE__*/createContext();\nexport const ReservationProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null); // Fecha seleccionada\n  const [availability, setAvailability] = useState({}); // Disponibilidad dinámica\n\n  // Función para verificar disponibilidad (centralizada)\n  const fetchAvailability = async date => {\n    if (!date) return; // No realizar consulta si no hay fecha seleccionada\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    try {\n      const response = await fetch(\"http://localhost:5000/api/reservations/check-availability\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          checkIn: formattedDate,\n          checkOut: formattedDate // Consultar disponibilidad para un solo día\n        })\n      });\n      const data = await response.json();\n      const updatedAvailability = roomsData.reduce((acc, room) => {\n        var _data$unavailableRoom;\n        acc[room.id] = !((_data$unavailableRoom = data.unavailableRooms) !== null && _data$unavailableRoom !== void 0 && _data$unavailableRoom.includes(room.id));\n        return acc;\n      }, {});\n      setAvailability(updatedAvailability); // Actualizar disponibilidad\n    } catch (error) {\n      console.error(\"Error al verificar disponibilidad:\", error);\n    }\n  };\n\n  // Llamar a fetchAvailability cuando cambia la fecha seleccionada\n  useEffect(() => {\n    if (selectedDate) {\n      fetchAvailability(selectedDate);\n    }\n  }, [selectedDate]);\n  return /*#__PURE__*/_jsxDEV(ReservationContext.Provider, {\n    value: {\n      selectedDate,\n      setSelectedDate,\n      availability,\n      setAvailability\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(ReservationProvider, \"UWpkbx4zPnXIyIur6jp3xpQZWoE=\");\n_c = ReservationProvider;\nvar _c;\n$RefreshReg$(_c, \"ReservationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ReservationContext","ReservationProvider","children","_s","selectedDate","setSelectedDate","availability","setAvailability","fetchAvailability","date","formattedDate","toISOString","split","response","fetch","method","headers","body","JSON","stringify","checkIn","checkOut","data","json","updatedAvailability","roomsData","reduce","acc","room","_data$unavailableRoom","id","unavailableRooms","includes","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Desktop/Proyecto Hostal/frontend/src/ReservationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const ReservationContext = createContext();\r\n\r\nexport const ReservationProvider = ({ children }) => {\r\n    const [selectedDate, setSelectedDate] = useState(null); // Fecha seleccionada\r\n    const [availability, setAvailability] = useState({}); // Disponibilidad dinámica\r\n\r\n    // Función para verificar disponibilidad (centralizada)\r\n    const fetchAvailability = async (date) => {\r\n        if (!date) return; // No realizar consulta si no hay fecha seleccionada\r\n        const formattedDate = date.toISOString().split(\"T\")[0];\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/reservations/check-availability\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                    checkIn: formattedDate,\r\n                    checkOut: formattedDate, // Consultar disponibilidad para un solo día\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            const updatedAvailability = roomsData.reduce((acc, room) => {\r\n                acc[room.id] = !data.unavailableRooms?.includes(room.id);\r\n                return acc;\r\n            }, {});\r\n            setAvailability(updatedAvailability); // Actualizar disponibilidad\r\n        } catch (error) {\r\n            console.error(\"Error al verificar disponibilidad:\", error);\r\n        }\r\n    };\r\n\r\n    // Llamar a fetchAvailability cuando cambia la fecha seleccionada\r\n    useEffect(() => {\r\n        if (selectedDate) {\r\n            fetchAvailability(selectedDate);\r\n        }\r\n    }, [selectedDate]);\r\n\r\n    return (\r\n        <ReservationContext.Provider\r\n            value={{\r\n                selectedDate,\r\n                setSelectedDate,\r\n                availability,\r\n                setAvailability,\r\n            }}\r\n        >\r\n            {children}\r\n        </ReservationContext.Provider>\r\n    );\r\n};\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC;AAEjD,OAAO,MAAMM,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMY,iBAAiB,GAAG,MAAOC,IAAI,IAAK;IACtC,IAAI,CAACA,IAAI,EAAE,OAAO,CAAC;IACnB,MAAMC,aAAa,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2D,EAAE;QACtFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,OAAO,EAAEV,aAAa;UACtBW,QAAQ,EAAEX,aAAa,CAAE;QAC7B,CAAC;MACL,CAAC,CAAC;MAEF,MAAMY,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAMC,mBAAmB,GAAGC,SAAS,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QAAA,IAAAC,qBAAA;QACxDF,GAAG,CAACC,IAAI,CAACE,EAAE,CAAC,GAAG,GAAAD,qBAAA,GAACP,IAAI,CAACS,gBAAgB,cAAAF,qBAAA,eAArBA,qBAAA,CAAuBG,QAAQ,CAACJ,IAAI,CAACE,EAAE,CAAC;QACxD,OAAOH,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MACNpB,eAAe,CAACiB,mBAAmB,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC9D;EACJ,CAAC;;EAED;EACApC,SAAS,CAAC,MAAM;IACZ,IAAIO,YAAY,EAAE;MACdI,iBAAiB,CAACJ,YAAY,CAAC;IACnC;EACJ,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,oBACIL,OAAA,CAACC,kBAAkB,CAACmC,QAAQ;IACxBC,KAAK,EAAE;MACHhC,YAAY;MACZC,eAAe;MACfC,YAAY;MACZC;IACJ,CAAE;IAAAL,QAAA,EAEDA;EAAQ;IAAAmC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEtC,CAAC;AAACrC,EAAA,CAhDWF,mBAAmB;AAAAwC,EAAA,GAAnBxC,mBAAmB;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}