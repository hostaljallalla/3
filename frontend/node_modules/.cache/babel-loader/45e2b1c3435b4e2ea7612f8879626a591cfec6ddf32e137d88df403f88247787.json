{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Proyecto Hostal\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport RoomList from '../components/RoomList';\nimport roomsData from '../data/roomsData';\nimport DatePicker, { registerLocale } from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport '../styles/Home.css';\nimport es from 'date-fns/locale/es';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterLocale(\"es\", es);\nconst Home = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null); // Fecha seleccionada\n  const [availability, setAvailability] = useState({}); // Estado de disponibilidad de habitaciones\n\n  // Función para verificar disponibilidad en el backend\n  const fetchAvailability = async date => {\n    if (!date) return;\n    const formattedDate = date.toISOString().split(\"T\")[0]; // Formatear fecha a YYYY-MM-DD\n    try {\n      const response = await fetch(\"http://localhost:5000/api/reservations/check-availability\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          checkIn: formattedDate,\n          // Solo fecha de ingreso\n          checkOut: formattedDate // Igual para verificar solo un día\n        })\n      });\n      const data = await response.json();\n      const updatedAvailability = roomsData.reduce((acc, room) => {\n        var _data$unavailableRoom;\n        acc[room.id] = !((_data$unavailableRoom = data.unavailableRooms) !== null && _data$unavailableRoom !== void 0 && _data$unavailableRoom.includes(room.id)); // Disponible si no está en unavailableRooms\n        return acc;\n      }, {});\n      setAvailability(updatedAvailability); // Actualizar estado de disponibilidad\n    } catch (error) {\n      console.error(\"Error al verificar disponibilidad:\", error);\n    }\n  };\n\n  // Llamar a fetchAvailability cada vez que cambia la fecha seleccionada\n  useEffect(() => {\n    if (selectedDate) {\n      fetchAvailability(selectedDate);\n    }\n  }, [selectedDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bienvenido al Hostal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Selecciona una fecha de ingreso:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: selectedDate,\n        onChange: date => setSelectedDate(date) // Actualizar la fecha seleccionada\n        ,\n        locale: \"es\",\n        placeholderText: \"Selecciona una fecha de ingreso\",\n        minDate: new Date() // No permitir fechas pasadas\n        ,\n        inline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RoomList, {\n      rooms: roomsData,\n      availability: availability\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"UWpkbx4zPnXIyIur6jp3xpQZWoE=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","RoomList","roomsData","DatePicker","registerLocale","es","jsxDEV","_jsxDEV","Home","_s","selectedDate","setSelectedDate","availability","setAvailability","fetchAvailability","date","formattedDate","toISOString","split","response","fetch","method","headers","body","JSON","stringify","checkIn","checkOut","data","json","updatedAvailability","reduce","acc","room","_data$unavailableRoom","id","unavailableRooms","includes","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selected","onChange","locale","placeholderText","minDate","Date","inline","rooms","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Desktop/Proyecto Hostal/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport RoomList from '../components/RoomList';\r\nimport roomsData from '../data/roomsData';\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport '../styles/Home.css';\r\nimport es from 'date-fns/locale/es';\r\n\r\nregisterLocale(\"es\", es);\r\n\r\nconst Home = () => {\r\n    const [selectedDate, setSelectedDate] = useState(null); // Fecha seleccionada\r\n    const [availability, setAvailability] = useState({}); // Estado de disponibilidad de habitaciones\r\n\r\n    // Función para verificar disponibilidad en el backend\r\n    const fetchAvailability = async (date) => {\r\n        if (!date) return;\r\n        const formattedDate = date.toISOString().split(\"T\")[0]; // Formatear fecha a YYYY-MM-DD\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/reservations/check-availability\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                    checkIn: formattedDate, // Solo fecha de ingreso\r\n                    checkOut: formattedDate, // Igual para verificar solo un día\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            const updatedAvailability = roomsData.reduce((acc, room) => {\r\n                acc[room.id] = !data.unavailableRooms?.includes(room.id); // Disponible si no está en unavailableRooms\r\n                return acc;\r\n            }, {});\r\n\r\n            setAvailability(updatedAvailability); // Actualizar estado de disponibilidad\r\n        } catch (error) {\r\n            console.error(\"Error al verificar disponibilidad:\", error);\r\n        }\r\n    };\r\n\r\n    // Llamar a fetchAvailability cada vez que cambia la fecha seleccionada\r\n    useEffect(() => {\r\n        if (selectedDate) {\r\n            fetchAvailability(selectedDate);\r\n        }\r\n    }, [selectedDate]);\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Bienvenido al Hostal</h1>\r\n\r\n            {/* Calendario para seleccionar la fecha de ingreso */}\r\n            <div className=\"calendar-container\">\r\n                <p>Selecciona una fecha de ingreso:</p>\r\n                <DatePicker\r\n                    selected={selectedDate}\r\n                    onChange={(date) => setSelectedDate(date)} // Actualizar la fecha seleccionada\r\n                    locale=\"es\"\r\n                    placeholderText=\"Selecciona una fecha de ingreso\"\r\n                    minDate={new Date()} // No permitir fechas pasadas\r\n                    inline\r\n                />\r\n            </div>\r\n\r\n            {/* Lista de habitaciones */}\r\n            <RoomList rooms={roomsData} availability={availability} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}