{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Proyecto Hostal\\\\frontend\\\\src\\\\PaypalButton.js\",\n  _s = $RefreshSig$();\n// PaypalButton.js\n\nimport React from \"react\";\nimport { PayPalButtons, usePayPalScriptReducer } from \"@paypal/react-paypal-js\";\n\n// 1. MODIFICAR: Añadimos 'reservationDetails' a las props que recibe el componente.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PaypalButton({\n  amount,\n  reservationDetails,\n  onPaymentSuccess,\n  onPaymentError,\n  onPaymentCancel\n}) {\n  _s();\n  const [{\n    isPending\n  }] = usePayPalScriptReducer();\n\n  // 2. AÑADIR: Función de validación para el formulario.\n  const isFormValid = () => {\n    if (!reservationDetails) return false;\n    const {\n      clientName1,\n      rutOrPassport,\n      phone,\n      nationality,\n      address\n    } = reservationDetails;\n    return clientName1 && rutOrPassport && phone && nationality && address;\n  };\n  const createOrder = (data, actions) => {\n    // Validamos el formulario ANTES de crear la orden en PayPal\n    if (!isFormValid()) {\n      alert(\"Por favor, completa todos los campos del formulario antes de pagar.\");\n      return Promise.reject(new Error(\"Formulario inválido\"));\n    }\n    return actions.order.create({\n      purchase_units: [{\n        amount: {\n          value: amount,\n          // Se mantiene el monto en USD\n          currency_code: \"USD\"\n        }\n      }]\n    });\n  };\n\n  // 3. MODIFICAR: 'onApprove' ahora se encarga de guardar la reserva.\n  const onApprove = (data, actions) => {\n    return actions.order.capture().then(async details => {\n      // Creamos el objeto final de la reserva con estado \"pagado\"\n      const reservationData = {\n        ...reservationDetails,\n        // Todos los datos del formulario\n        paymentMethod: 'PayPal',\n        // Medio de pago\n        estado_pago: 'pagado',\n        // ¡Estado pagado!\n        paypalTransactionId: details.id // ID de la transacción de PayPal (opcional, pero útil)\n      };\n      try {\n        // Hacemos la llamada al backend para guardar la reserva\n        const response = await fetch('https://three-2cs3.onrender.com/api/reservations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(reservationData)\n        });\n        if (!response.ok) {\n          throw new Error('El servidor no pudo guardar la reserva.');\n        }\n\n        // Si todo sale bien, llamamos a onPaymentSuccess con los datos guardados\n        onPaymentSuccess(reservationData);\n      } catch (error) {\n        onPaymentError(error.message);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isPending ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PayPalButtons, {\n      createOrder: createOrder,\n      onApprove: onApprove,\n      onCancel: onPaymentCancel // onCancel ya estaba bien\n      ,\n      style: {\n        layout: \"vertical\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(PaypalButton, \"RjiHh9V02YoiBlGRVsHKbv0Sng4=\", false, function () {\n  return [usePayPalScriptReducer];\n});\n_c = PaypalButton;\nvar _c;\n$RefreshReg$(_c, \"PaypalButton\");","map":{"version":3,"names":["React","PayPalButtons","usePayPalScriptReducer","jsxDEV","_jsxDEV","PaypalButton","amount","reservationDetails","onPaymentSuccess","onPaymentError","onPaymentCancel","_s","isPending","isFormValid","clientName1","rutOrPassport","phone","nationality","address","createOrder","data","actions","alert","Promise","reject","Error","order","create","purchase_units","value","currency_code","onApprove","capture","then","details","reservationData","paymentMethod","estado_pago","paypalTransactionId","id","response","fetch","method","headers","body","JSON","stringify","ok","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","style","layout","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Desktop/Proyecto Hostal/frontend/src/PaypalButton.js"],"sourcesContent":["// PaypalButton.js\r\n\r\nimport React from \"react\";\r\nimport { PayPalButtons, usePayPalScriptReducer } from \"@paypal/react-paypal-js\";\r\n\r\n// 1. MODIFICAR: Añadimos 'reservationDetails' a las props que recibe el componente.\r\nexport default function PaypalButton({ amount, reservationDetails, onPaymentSuccess, onPaymentError, onPaymentCancel }) {\r\n  const [{ isPending }] = usePayPalScriptReducer();\r\n\r\n  // 2. AÑADIR: Función de validación para el formulario.\r\n  const isFormValid = () => {\r\n    if (!reservationDetails) return false;\r\n    const { clientName1, rutOrPassport, phone, nationality, address } = reservationDetails;\r\n    return clientName1 && rutOrPassport && phone && nationality && address;\r\n  };\r\n\r\n  const createOrder = (data, actions) => {\r\n    // Validamos el formulario ANTES de crear la orden en PayPal\r\n    if (!isFormValid()) {\r\n      alert(\"Por favor, completa todos los campos del formulario antes de pagar.\");\r\n      return Promise.reject(new Error(\"Formulario inválido\"));\r\n    }\r\n    \r\n    return actions.order.create({\r\n      purchase_units: [\r\n        {\r\n          amount: {\r\n            value: amount, // Se mantiene el monto en USD\r\n            currency_code: \"USD\",\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  // 3. MODIFICAR: 'onApprove' ahora se encarga de guardar la reserva.\r\n  const onApprove = (data, actions) => {\r\n    return actions.order.capture().then(async (details) => {\r\n      // Creamos el objeto final de la reserva con estado \"pagado\"\r\n      const reservationData = {\r\n        ...reservationDetails, // Todos los datos del formulario\r\n        paymentMethod: 'PayPal', // Medio de pago\r\n        estado_pago: 'pagado',   // ¡Estado pagado!\r\n        paypalTransactionId: details.id, // ID de la transacción de PayPal (opcional, pero útil)\r\n      };\r\n\r\n      try {\r\n        // Hacemos la llamada al backend para guardar la reserva\r\n        const response = await fetch('https://three-2cs3.onrender.com/api/reservations', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(reservationData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('El servidor no pudo guardar la reserva.');\r\n        }\r\n        \r\n        // Si todo sale bien, llamamos a onPaymentSuccess con los datos guardados\r\n        onPaymentSuccess(reservationData);\r\n\r\n      } catch (error) {\r\n        onPaymentError(error.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isPending ? (\r\n        <p>Cargando...</p>\r\n      ) : (\r\n        <PayPalButtons\r\n          createOrder={createOrder}\r\n          onApprove={onApprove}\r\n          onCancel={onPaymentCancel} // onCancel ya estaba bien\r\n          style={{ layout: \"vertical\" }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}